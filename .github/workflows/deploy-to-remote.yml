name: Deploy to remote

on:
  push:
    branches: [master]

jobs:
  create-depeloyment-artifacts:
    name: Create deployment artifacts
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - name: Create CSS and Javascript
        run: |
          npm install
          npm run build

      - name: Configure PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml

      - name: Install composer dependencies
        run: composer install --prefer-dist --no-dev --no-interaction

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git *

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

  prepare-release-on-server:
    runs-on: ubuntu-latest
    needs: create-depeloyment-artifacts
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ secrets.DIR }}/artifacts

      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "${{ secrets.DIR }}/releases/${GITHUB_SHA}"
            tar xzf ${{ secrets.DIR }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ secrets.DIR }}/releases/${GITHUB_SHA}"

            rm -rf ${{ secrets.DIR }}/releases/${GITHUB_SHA}/storage
            mkdir -p ${{ secrets.DIR }}/app_storage/{app,public,framework,logs}
            mkdir -p ${{ secrets.DIR }}/app_storage/framework/{cache,sessions,testing,views}
            mkdir -p ${{ secrets.DIR }}/app_storage/framework/cache
            chmod -R 0777 ${{ secrets.DIR }}/app_storage

  run-before-hooks:
    name: "Before hook"
    runs-on: ubuntu-latest
    needs: [create-depeloyment-artifacts, prepare-release-on-server]
    steps:
      - name: Run before hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ secrets.DIR }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ secrets.DIR }}/current
          STORAGE_PATH: ${{ secrets.DIR }}/app_storage
          BASE_PATH: ${{ secrets.DIR }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH
          script: |
            echo ${GITHUB_SHA}

  activate-release:
    name: "Activate Release"
    runs-on: ubuntu-latest
    needs:
      [
        create-depeloyment-artifacts,
        prepare-release-on-server,
        run-before-hooks,
      ]
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ secrets.DIR }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ secrets.DIR }}/current
          STORAGE_PATH: ${{ secrets.DIR }}/app_storage
          BASE_PATH: ${{ secrets.DIR }}
          LARAVEL_ENV: ${{ secrets.ENV }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH
          script: |
            ln -s -f "${BASE_PATH}/.env" "${RELEASE_PATH}"
            ln -s -f "${STORAGE_PATH}" "${RELEASE_PATH}/storage"
            ln -s -f "${RELEASE_PATH}/public" "${BASE_PATH}"
            ln -s -f "${STORAGE_PATH}/app/public" "${RELEASE_PATH}/public/storage"
            ln -s -n -f "${RELEASE_PATH}" "${ACTIVE_RELEASE_PATH}"

  run-after-hooks:
    name: "After hook"
    runs-on: ubuntu-latest
    needs: [create-depeloyment-artifacts, prepare-release-on-server, activate-release]
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ secrets.DIR }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ secrets.DIR }}/current
          STORAGE_PATH: ${{ secrets.DIR }}/app_storage
          BASE_PATH: ${{ secrets.DIR }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH
          script: |
            echo ${GITHUB_SHA}

  clean-up:
    name: "Clean Up"
    runs-on: ubuntu-latest
    needs: [create-depeloyment-artifacts, prepare-release-on-server, activate-release, run-after-hooks]
    steps:
      - name: Clean up
        uses: appleboy/ssh-action@master
        env:
          RELEASE_PATH: ${{ secrets.DIR }}/releases
          ARTIFACTS_PATH: ${{ secrets.DIR }}/artifacts
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: RELEASE_PATH, ARTIFACTS_PATH
          script: |
            cd $RELEASE_PATH && ls -t -1 | tail -n +2 | xargs rm -rf
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +2 | xargs rm -rf
